{
    "collab_server" : "",
    "contents" : "\n#-------------------------------------------------------------------\n#' MLEs for the PPPCA model\n#'\n#'  The function returns the MLEs for the PPCA model at a given choice of dimension.\n#'  This function is adapted from the one made available by Mark Clark on github\n#'  with the link of the original code under ``See also''.\n#'\n#' @param x a data matrix with the number of rows to be reduced; only complete columns are used.\n#' @param nComp an integer specifying the number of principal components or effective dimension retained.\n#' @param tol a tolerance level for the EM algorithm to terminate computations.\n#' @param maxits the maximum number of iterations for EM to converge to the MLEs.\n#'\n#' @return a list of MLEs: the first item of the list is the loading matrix \\eqn{W},\n#'    and the second item of the list is the error variance \\eqn{\\sigma^{2}} or \\code{sigma2}.\n#'\n#' @importFrom Matrix nearPD\n#' @importFrom psych tr\n#'\n#' @examples\n#' \\dontrun{\n#' library(MASS)\n#' X <- mvrnorm(1000, mu = rep(0,10), Sigma = diag(1,10))\n#' ppcaMLE(x = t(X), nComp = 5)\n#' }\n#'\n#' @references Tipping, M. E., and Bishop, C. M. (1999). Probabilistic principal component analysis.\n#'    \\emph{Journal of the Royal Statistical Society: Series B (Statistical Methodology)},\n#'    \\strong{61}(3), 611-622.\n#'\n#' @seealso \\url{https://github.com/m-clark/Miscellaneous-R-Code/blob/master/ModelFitting/EM\\%20Examples/EM\\%20algorithm\\%20for\\%20ppca.R}\n#'\n#' @keywords probabilistic PCA, Expectation and Maximization, Maximum Likelihood Estimates\n#'\n\n\nppcaMLE <- function(x, nComp = 2, tol = 1e-06, maxits = 100) {\n\n\nif (is.null(x)) {\n  stop(\"Please provide a data matrix\")\n}\n\n\n\n  X <- x[, !apply(x, 2, function(xx) sum(is.na(xx)) > 0)]\n  M <- ncol(X)\n  n <- nrow(X)\n\n  if (M < n){\n  stop(\"Please make sure the number of columns exceed the number of rows.\")\n  }\n\n  S <- stats::cov(scale(t(X)), use = \"pairwise.complete\")\n  SS <- as.matrix(Matrix::nearPD(S)$mat)\n  evals <- eigen(SS)$val\n  evecs <- eigen(SS)$vectors\n  lambda <- evals[evals > 0]\n  N <- length(lambda)\n\n  if (nComp == 1) {\n    return(list(W = matrix(0, N,N), sigma2 = 1))\n  } else{\n    U <- evecs[, 1:nComp]\n    D <- diag(lambda[1:nComp])\n    L <- t(MASS::mvrnorm(M, mu = rep(0, nComp), Sigma = diag(rep(1, nComp))))\n    Sigma2 <- sum(lambda[(nComp + 1):N])/(N - nComp)\n    W <- U %*% chol(D - Sigma2 * diag(nComp))\n\n    it <- 0\n    converged <- FALSE\n    loglk <- 0\n\n    while ((!converged) & (it < maxits)) {\n      if (exists(\"W.new\")) {\n        W.old <- W.new\n        sigma2.old <- sigma2.new\n      } else {\n        W.old <- W\n        sigma2.old <- Sigma2\n      }\n\n      loglk.old <- loglk\n      Psi <- sigma2.old * diag(nComp)\n      MM <- t(W.old) %*% W.old + Psi\n      W.new <- SS %*% W.old %*% solve(Psi + solve(MM) %*% t(W.old) %*% SS %*% W.old)\n      sigma2.new <- 1/N * sum(diag((SS - SS %*% W.old %*% solve(MM) %*% t(W.new))))\n      L <- solve(MM) %*% t(W.new) %*% (X)\n      loglk1 <- mvtnorm::dmvnorm(t(X - W.new %*% L),\n                                 mean = matrix(0, N),\n                                 sigma = diag(sigma2.new, N), log = T)\n      loglk2 <- mvtnorm::dmvnorm(t(L), mean = matrix(0, nComp),\n                                 sigma = diag(1, nComp), log = T)\n      loglk <- -sum(loglk1) - sum(loglk2)\n\n      it <- it + 1\n      converged <- ((max(abs(loglk - loglk.old)) <= tol) &\n                      (max(abs(sigma2.new - sigma2.old)) <= tol) &\n                      (max(abs(psych::tr(t(W.new) %*% W.new) - psych::tr(t(W.old) %*% W.old))) <= tol))\n    }\n\n    return(list(W = W.new, sigma2 = sigma2.new))\n  }\n}\n",
    "created" : 1521437376561.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "909999569",
    "id" : "52445961",
    "lastKnownWriteTime" : 1521436987,
    "last_content_update" : 1521436987,
    "path" : "~/Documents/AcademicResearch/kraken_files/WeiGit/SPAC2/R/PPCA_MLE_EM.R",
    "project_path" : "R/PPCA_MLE_EM.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}