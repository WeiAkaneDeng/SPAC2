{
    "collab_server" : "",
    "contents" : "#' Automatic Choice of dimensionality for PCA using Laplace's method\n#'\n#' The function returns the choice dimension for PCA under the PPCA setup using Laplace approximation.\n#'\n#' @param x a data matrix with the number of rows to be reduced; only complete columns are used.\n#' @param lambda a numeric vector of sample eigenvalues of the covariance matrix of t(\\code{x})\n#' @param M if \\code{x} were not supplied, \\code{M} should be given as the number of columns of \\code{x}.\n#' @param evidence a logical specifying whether the BIC evidence or\n#'     the integer that minimized the evidence should be returned\n#' @return an integer K between 1 and N that maximizes the posterior BIC approximated by Laplace's method.\n#'\n#' @examples\n#' \\dontrun{\n#' X <- MASS::mvrnorm(1000, mu = rep(0,10), Sigma = diag(1,10))\n#' eigen_values <- eigen(as.matrix(Matrix::nearPD(stats::cov(scale(X)))$mat))$val\n#' minka2001(lambda = eigen_values, M = 100)\n#' minka2001(lambda = eigen_values, M = 5000)\n#' }\n#'\n#' @keywords information criterion, profile log-likelihood, model selection, Laplace's method, Bayesian evidence\n#'\n#' @references Minka, T. P. (2000). Automatic choice of dimensionality for PCA.\n#' In \\emph{NIPS} (Vol. \\strong{13}, pp. 598-604).\n#'\n\nminka2001 <- function(x = NULL, lambda=NULL, M = NULL, evidence = FALSE) {\n\n  if (is.null(x) && is.null(lambda)) {\n    stop(\"Please provide either a data matrix or a numerical vector of sample eigenvalues\")\n  }\n\n  if (is.null(x)) {\n\n    if (is.null(M)) {\n      stop(\"Please provide the number of observations or features along with the sample eigenvalues\")\n    }\n\n    lambda <- ifelse(lambda > 0, lambda, 0)\n    n <- sum(lambda > 0)\n\n    sigma2 <- sapply(1:(n - 1), function(x) sum(lambda[(x + 1):n])/(n - x))\n\n  } else if (is.null(lambda)) {\n\n    X <- x[, !apply(x, 2, function(xx) sum(is.na(xx)) > 0)]\n    M <- ncol(X)\n    n <- nrow(X)\n    S <- stats::cov(scale(t(X)), use = \"pairwise.complete\")\n    SS <- as.matrix(Matrix::nearPD(S)$mat)\n    lambda = eigen(SS)$val\n    lambda = ifelse(lambda > 0, lambda, 0)\n  }\n\n    N <- sum(lambda > 0)\n    out <- NA\n    for (K in 1:N){\n    mm <- N * K - (K + 1) * K/2\n    sigma2 <- sum(lambda[(K + 1):N])/(N - K)\n    l_tild <- ifelse(lambda > sigma2, lambda, sigma2)\n    tiny_prod <- function(i) {\n        prod(1/l_tild[(i + 1):N] - 1/l_tild[i]) * prod(lambda[i] - lambda[(i + 1):N])\n    }\n    logA <- mm * log(M) + sum(log(sapply(1:K, tiny_prod)))\n    logrho_k <- 1/(N - K) * sum(log(lambda[(K + 1):N])) - 1/(N - K) * log(sum(lambda[(K +\n        1):N]))\n    out[K] <- (mm - K)/2 * log(2) - M * (N - K) * logrho_k - 0.5 * logA - K/2 * log(M) + sum(lgamma((N -\n        (1:K) + 1)/2)) - M/2 * sum(log(lambda[1:K])) + M * sum(log(lambda[(K + 1):N]))\n    }\n    if (evidence) {\n      return(out)\n    } else {\n      return(which.max(out))\n    }\n}\n\n\n\n\n\n#' Automatic Choice of dimensionality for PCA using BIC approximation.\n#'\n#' The function returns the choice dimension for PCA under the PPCA setup using a simplification of Laplace's method.\n#'\n#' @param x a data matrix with the number of rows to be reduced; only complete columns are used.\n#' @param lambda a numeric vector of sample eigenvalues of the covariance matrix of t(\\code{x})\n#' @param M if \\code{x} were not supplied, \\code{M} should be given as the number of columns of \\code{x}.\n#' @param evidence a logical specifying whether the BIC evidence or\n#'     the integer that minimized the evidence should be returned\n#' @return an integer K between 1 and N that maximizes the approximated marginal log-likelihood.\n#'\n#' @examples\n#' \\dontrun{\n#' X <- MASS::mvrnorm(1000, mu = rep(0,10), Sigma = diag(1,10))\n#' eigen_values <- eigen(as.matrix(Matrix::nearPD(stats::cov(scale((X))))$mat))$val\n#' minka2001_BIC(lambda = eigen_values, M = 1000)\n#' minka2001_BIC(lambda = eigen_values, M = 5000)\n#' }\n#'\n#' @keywords information criterion, profile log-likelihood, model selection, Laplace's method, Bayesian evidence\n#'\n#' @references Minka, T. P. (2000). Automatic choice of dimensionality for PCA.\n#' In \\emph{NIPS} (Vol. \\strong{13}, pp. 598-604).\n#'\n\n\nminka2001_BIC <- function(x = NULL, lambda=NULL, M = NULL,evidence = FALSE) {\n\n  if (is.null(x) && is.null(lambda)) {\n    stop(\"Please provide either a data matrix or a numerical vector of sample eigenvalues\")\n  }\n\n  if (is.null(x)) {\n\n    if (is.null(M)) {\n      stop(\"Please provide the number of observations or features along with the sample eigenvalues\")\n    }\n\n    lambda <- ifelse(lambda > 0, lambda, 0)\n    n <- sum(lambda > 0)\n\n    sigma2 <- sapply(1:(n - 1), function(x) sum(lambda[(x + 1):n])/(n - x))\n\n  } else if (is.null(lambda)) {\n\n    X <- x[, !apply(x, 2, function(xx) sum(is.na(xx)) > 0)]\n    M <- ncol(X)\n    n <- nrow(X)\n    S <- stats::cov(scale(t(X)), use = \"pairwise.complete\")\n    SS <- as.matrix(Matrix::nearPD(S)$mat)\n    lambda = eigen(SS)$val\n    lambda = ifelse(lambda > 0, lambda, 0)\n  }\n\n    out <- NA\n    N <- sum(lambda > 0)\n    for (K in 1:N){\n    mm <- N * K - (K + 1) * K/2\n    sigma2 <- sum(lambda[(K + 1):N])/(N - K)\n    l_tild <- ifelse(lambda > sigma2, lambda, sigma2)\n    tiny_prod <- function(i) {\n        prod(1/l_tild[(i + 1):N] - 1/l_tild[i]) * prod(lambda[i] - lambda[(i + 1):N])\n    }\n    logA <- mm * log(M) + sum(log(sapply(1:K, tiny_prod)))\n    logrho_k <- 1/(N - K) * sum(log(lambda[(K + 1):N])) - 1/(N - K) * log(sum(lambda[(K +\n        1):N]))\n    out[K] <- (mm + K)/2 * log(M) - M * (N - K) * (logrho_k) - M/2 * sum(log(lambda[1:K])) +\n      M * sum(log(lambda[(K + 1):N]))\n    }\n\n     if (evidence) {\n      return(out)\n    } else {\n      return(which.max(out))\n    }\n}\n",
    "created" : 1521437370314.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2437506009",
    "id" : "5B21910A",
    "lastKnownWriteTime" : 1521434385,
    "last_content_update" : 1521434385,
    "path" : "~/Documents/AcademicResearch/kraken_files/WeiGit/SPAC2/R/minka.R",
    "project_path" : "R/minka.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}