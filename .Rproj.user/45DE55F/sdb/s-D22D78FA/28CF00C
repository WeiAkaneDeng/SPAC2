{
    "collab_server" : "",
    "contents" : "#' Profile log-likelihood of the PPCA model.\n#'\n#' The function returns the profile log-likelihood\n#'    of the PPCA model for each possible choice of\n#'    \\eqn{K (1, 2, \\dots, n-1)} at their respective MLEs.\n#'    The maximum choice was set at \\eqn{n-1} because when \\eqn{K=n},\n#'    the profile log-likelihood is equal to that at \\eqn{K=n-1}.\n#'\n#' @param x a data matrix where the number of rows is to be reduced; only complete columns are used\n#' @param lambda a numeric vector of sample eigenvalues of the covariance matrix of t(\\code{x})\n#' @param M if \\code{x} were not supplied, \\code{M} should be given as the number of columns of \\code{x}.\n#'\n#' @param EM a logic indicator for whether the profile log-likelihood should be computed for\n#'    the MLE estimated using EM algorithms, if FALSE, the profile log-likelihood will be\n#'    evaluated by substitute the analytical formulation of MLEs.\n#'    Note that if \\eqn{n} > \\eqn{m}, it will not be possible to use this option.\n#'\n#' @param param a list of MLEs to be supplied if the profile log-likelihood was to\n#'    be evaluate at external MLES; the first list should contain a loading\n#'    matrix \\eqn{W} with dimension \\eqn{n} by \\eqn{K} (\\eqn{\\le n});\n#'    and the second a numeric value between 0 and 1 for the\n#'    residual variance \\code{sigma2}.\n#'\n#' @return profile log-likelihood of length \\eqn{n-1}.\n#'\n#' @importFrom MASS mvrnorm\n#' @importFrom Matrix nearPD\n#' @importFrom mvtnorm dmvnorm\n#' @importFrom psych tr\n#'\n#' @examples\n#' \\dontrun{\n#' library(MASS)\n#' X <- mvrnorm(1000, mu = rep(0,10), Sigma = diag(1,10))\n#' eigen_values <- eigen(as.matrix(Matrix::nearPD(stats::cov(scale(X)))$mat))$val\n#' U <- pracma::randortho(10)\n#' W <- U%*%diag(1, 10)%*%t(U)\n#' sigma2 <- 0.4\n#' ppcaLog(x = t(X), EM=TRUE) # supply a data matrix\n#' ppcaLog(x = t(X), param = list(W, sigma2)) # supply a data matrix and MLEs\n#' ppcaLog(lambda = eigen_values, M = 1000) # supply the sample eigenvalues\n#' }\n#' @author Wei Q. Deng, \\email{utstat.toronto.edu}\n#'\n#' @references Tipping, M. E., and Bishop, C. M. (1999). Probabilistic principal component analysis.\n#'    \\emph{Journal of the Royal Statistical Society: Series B (Statistical Methodology)}, \\strong{61}(3), 611-622.\n#'\n#' @keywords probabilistic PCA, Expectation and Maximization, Maximum Likelihood Estimates, profile log-likelihood\n#'\n\nppcaLog <- function(x = NULL, lambda = NULL, M = NULL, param = NULL, EM = FALSE) {\n\n  if (is.null(x) && is.null(lambda)) {\n    stop(\"Please provide either a data matrix or a numerical vector of sample eigenvalues\")\n  }\n\n  if (is.null(x)) {\n\n    if (is.null(M)) {\n      stop(\"Please provide the number of observations or features along with the sample eigenvalues\")\n    }\n\n    lambda <- lambda[lambda > 0]\n    N <- length(lambda)\n    sigma2 <- sapply(1:(N - 1), function(x) sum(lambda[(x + 1):N])/(N - x))\n    loglk <- -M/2 * (cumsum(log(lambda)[1:(N - 1)]) + (N - (1:(N - 1))) * log(sigma2) +\n                       N + N * log(2 * pi))\n\n  } else if (is.null(lambda)) {\n\n    X <- x[, !apply(x, 2, function(xx) sum(is.na(xx)) > 0)]\n    M <- ncol(X)\n    N <- nrow(X)\n    S <- stats::cov(scale(t(X)), use = \"pairwise.complete\")\n    SS <- as.matrix(Matrix::nearPD(S)$mat)\n\n    if (EM == FALSE){\n      if (is.null(param)) {\n        stop(\"Please supply a list of MLEs W and sigma2\")\n      }\n      sigma2M <- param[[2]]\n      W <- param[[1]]\n      loglk <- -M/2 * (N * log(2 * pi) + log(det(W %*% t(W) + diag(sigma2M, N))) +\n                         psych::tr(solve(W %*% t(W) + diag(sigma2M, N)) %*% SS))\n    } else{\n\n      evals <- eigen(SS)$val\n      evecs <- eigen(SS)$vectors\n      lambda <- ifelse(evals > 0, evals, 0)\n\n      loglk <- NA\n\n      for (i in 1:(N - 1)) {\n        list_ppca <- ppcaMLE(X, nComp = i, tol = 1e-10)\n        W <- list_ppca$W\n        sigma2 <- max(list_ppca$sigma2, 0)\n        loglk[i] <- -M/2 * (N * log(2 * pi) + log(det(W %*% t(W) + diag(sigma2,N))) +\n        psych::tr(solve(W %*% t(W) + diag(sigma2, N)) %*% SS))\n      }\n    }\n  }\n  return(loglk)\n}\n",
    "created" : 1521437383192.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "658180837",
    "id" : "28CF00C",
    "lastKnownWriteTime" : 1521437500,
    "last_content_update" : 1521437500,
    "path" : "~/Documents/AcademicResearch/kraken_files/WeiGit/SPAC2/R/PPCA_profile_log_likelihood.R",
    "project_path" : "R/PPCA_profile_log_likelihood.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}